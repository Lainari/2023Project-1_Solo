// 230327 Class Time
/**
 * 정의
 * 
 * const 객체명 = {     // 키1:값1, 키2:값2, ... , 키n:값n 형태를 보임
 *  속성명1:속성값1,    // property(속성)
 *  속성명2:속성값2,
 *  ...
 *  속성명n:속성값[,] // 마지막 콤마(,) 생략 가능
 * }
 * 
 * 속성명 : 문자열로 지정
 * 속성값 : 모든 Data type들
 * 속성값이 함수인 경우 : 메서드(Method) : 객체내에 정의된 함수
 */

// console.log(문자열) 분석
// console = 객체
// log = console 객체의 메서드
// parameter 가 문자열로 들어간다
// 실행효과는 화면에 argument로 들어온 문자열을 출력한다



// 사용법
/**
 * .연산자 이용법
 *  - 객체명.속성명 : 읽기
 *  - 객체명.속성명 = 값 : 쓰기/수정
 *  - 객체명.속성명(인수들)
 * 
 * 연관배열이용법
 *  - 객체명['속성명']
 *  - 읽기 : 객체명['속성명']
 *  - 쓰기/수정 : 객체명['속성명'] = 값
* - 메소드 호출 불가
 *  - 속성 삭제
 *    - delete 객체명.속성명;
 *    - delete 객체명['속성명'] ???
 * 
 * 
 *  - 연관배열(Associated Array)
 *      - 연상배열??
 *      - 연관배열의 index : 문자열
 *
 * 
 */

// 객체간 비교 / 참조 / 복사
/**
 *  - 비교
 *   - {} == {}, {} === {} ==> false
 * 
 */
console.log({} == {}); // 결과 false
console.log({} === {}); // 결과 false

/**
 *  - 참조(Reference)
 *   - 객체에 대한 변수는 해당 객체의 참조값을 저장
 *   - 참조값 : 메모리(heap 메모리)에서의 주소값
 *   - primitive type의 변수 : 리터럴 값 저장
        - let a = 'jit';
        - 메모리(stack 메모리)에 값 저장시키고 변수로 별명처럼 사용
 * 
    - 객체의 복사
      - 단순 대입으로는 불가
      - const a = {}; const c = a;
       - 참조값의 복사로 a, c는 같은 객체를 참조하고 있음, 객체의 복사가 아님
 *    - clone()이용 복사해야 함
 */